                                   HTML: Начертание текста

<b> — простое выделение текста. Его можно использовать в любом месте для визуального выделения текста. Никакой смысловой нагрузки этот тег не несёт 

<strong> — логическое выделение важного участка текста. Этот тег несёт смысловую нагрузку и размечает именно важную часть. Его не следует применять на всех участках подряд

Когда-то разработчики хотели, чтобы эти теги выглядели по разному и отличались с точки зрения поведения для браузера, но история пошла по чуть иному пути. Сейчас считается, что использование <b> избыточно и для визуального выделения нужно использовать CSS, а для важных участков <strong>

Тегом <i> было размечено название портала Code Basics. Тег предназначен для визуального выделение текста курсивом и не несёт смысловой нагрузки

Тегом <em> была выделена фраза «бесплатные курсы». Это логический акцент на бесплатности курсов, который был придан предложению. Курсов много, а бесплатных нет, поэтому стоит добавить акцент на эту часть предложения

Теги для визуального выделения короче, чем для смыслового. Это поможет запомнить, когда использовать <i> и <b>, а когда <em> и <strong>

В практике вместо <i> и <b> используют стилизацию с помощью CSS
-------------------------------------------------------------------------------------------------------------------------------
                                  HTML: Списки

Для создания маркированного списка используется тег <ul>.

Нумерованный список создаётся с помощью тега <ol>

вложенный список является частью пункта списка и находится внутри тега <li>
------------------------------------------------------------------------------------------------------------------
                                     Таблицы

<table> — область таблицы
<tr> — строка
<thead> — шапка таблицы
<th> — ячейка шапки
<tbody> — тело таблицы
<td> — ячейка


<table>
  <thead> <!-- Шапка таблицы -->
    <tr>
      <th>Вкусняшка</th> <!-- Ячейка-заголовок -->
      <th>Вес</th>
      <th>Цена</th>
    </tr>
  </thead>

  <tr>
    <td>Шоколад «Тота»</td>
    <td>100 грамм</td>
    <td>200 рублей</td>
  </tr>

  <tr>
    <td>Шоколад «Тота TeamLead»</td>
    <td>150 грамм</td>
    <td>500 рублей</td>
  </tr>
</table>
 добавление тега <tbody>, который размечает основую часть таблицы
 Для создания заголовка таблицы используется парный тег <caption>. Если заголовок есть, то он обязательно должен располагаться сразу после тега <table>
Дополнительно можно указать «подвал/footer» таблицы. В нём может находиться суммарная информация, например, стоимость всех товаров.

<table>
  <caption>Ассортимент шоколада «Hexlet»</caption>
  <thead>
    <tr>
      <th>Вкусняшка</th>
      <th>Вес</th>
      <th>Цена</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Шоколад «Тота»</td>
      <td>100 грамм</td>
      <td>200 рублей</td>
    </tr>

    <tr>
      <td>Шоколад «Тота TeamLead»</td>
      <td>150 грамм</td>
      <td>500 рублей</td>
    </tr>
  </tbody>
</table>

объединить ячейки в столбцах или строках можно с помощью специальных атрибутов colspan и rowspan. Их значениями является количество ячеек справа (для colspan) или снизу (для rowspan), которые нужно объединить с текущей. Отсчёт начинается с текущей ячейки, к которой применено свойство. Например, если стоит значение colspan="2", то будет объединена текущая ячейка с соседней.

Количество ячеек в каждой строке таблицы должно быть одинаковым после объединения. Важно различать количество тегов <td> и общее количество ячеек. Например, использовав на ячейке атрибут colspan="2" вы получите две логические ячейки, только они будут объединены. По этой причине необходимо убрать одну физическую ячейку из разметки для компенсации

Если используется атрибут colspan, то из HTML нужно удалить ячейки в той же строке. Если используется атрибут rowspan, то удаляются ячейки в строках ниже

<table>
  <thead>
    <tr>
      <th>Сотрудник</th>
      <th>Зарплата</th>
      <th>Бонусы</th>
      <th>Менеджер</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td>Алексей Примадонин</td>
      <td>750$</td>
      <td>63$</td>
      <td rowspan="2">Кодовёнок Хекслетович</td>
    </tr>
    <tr>
      <td>Вениамин Редакторович</td>
      <td>1200$</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
-------------------------------------------------------------------------------------------------
                     HTML: Специальные символы HTML

Основными типографическими мнемониками в HTML являются:

&nbsp; — неразрывный пробел. Очень важная вещь, которая позволяет не переносить строку с пробелом там, где это может испортить логическую структуру текста
&laquo; и &raquo; — традиционные «кавычки-ёлочки». Повсеместно используются в типографике
&mdash; — длинное тире
Мнемоники распространены, когда необходимо вставить теги без их обработки браузером. В таком случае можно воспользоваться мнемониками &lt; и &gt;, которые нужны для обозначения < и > соответственн

----------------------------------------------------------------------------------------------------
                       ссылки

Для создания ссылки используется парный тег <a> с обязательным атрибутом href который указывает адрес страницы, на которую произойдёт переход после клика.
<a href="Ссылка на документ">Текст ссылки</a>
Ссылки можно поделить на 3 типа:

Относительные.      Такие ссылки ссылаются на тот же сайт, с которого и происходит переход
Абсолютные.         Позволяют переходить на сторонние ресурсы в интернете
Ссылки-якоря.       Используются для перемещения внутри текущего документа
Единственное различие относительных и абсолютных ссылок — формат, в котором указывается ссылка. В случае с относительными ссылками не указывается адрес самого сайта, на который будет переход, он будет совпадать с сайтом, с которого произошёл переход

Ссылки-якоря удобны в использовании внутри объёмного документа и позволяют переместить пользователя к нужному месту. Например, если страница представляет собой доклад, то удобнее, если есть возможность быстро переместиться к любому его разделу и обратно.

Создание ссылки-якоря состоит из двух действий:

Блоку на странице, к которому мы хотим совершить переход, нужно указать уникальный идентификатор. Делается это с помощью атрибута id
Добавить тег <a>, и в атрибуте href указать ссылку вида #название-уникального-идентификатора
.....................................-----------------------------------------------
                       HTML: Форматированный текст

<pre>, задача которого — вывести текст внутри себя с сохранением всех пробельных символов. По умолчанию тег <pre> выводит текст моноширинным шрифтом, в котором все символы имеют одинаковую ширину, в отличие от обычных шрифтов.

<pre>
Вы ушли,
        как говорится,
                      в мир в иной.
Пустота...
        Летите,
              в звезды врезываясь.
Ни тебе аванса,
              ни пивной.
Трезвость.
</pre>
...........................................
   HTML: Вставка компьютерного кода в HTML

Для создания блока с кодом используется тег <code>, внутри которого записывается код на любом языке программирования.

Тег <code> часто используют вместе с тегом <pre>, что позволяет сохранить форматирование. Если тег <pre> не используется, то переносы строк нужно контролировать самостоятельно, например, оборачивая каждую строку в тег <p>.

Важно, что все теги внутри <code> будут обработаны браузером, по этой причине внутри используются специальные символы. Также частое решение — оборачивание названия тега в отдельный тег, например <span>
<code>
  &lt;<span>p</span>&gt;Вставляем тег p в виде простого текста &lt;<span>/p</span>&gt;
</code>
------------------------------------------------------------------------------------
                 картинки

 Для вставки картинки на страницу используется непарный тег <img>, у которого два обязательных атрибута: src и alt.
-------------------------------------------------------------------------------------------------
                 <audio>.

тега <audio>. Атрибут controls добавляет элементы интерфейса для плеера
не все браузеры поддерживают одни и те же форматы аудио. Специально для этого существует вложенный тег source, в котором указываются пути на другие форматы аудио файлов. В таком случае браузер выберет тот, который поддерживается в настоящий момент. При такой разметке указывать src у тега <audio> необязательно.
<audio controls>
  <source src="https://example.com/audio.mp3">
  <source src="https://example.com/audio.ogg">
</audio>
-------------------------------------------------------------------------------------------------------------------
Тег <video> парный, в котором, при отсутствии вложенных тегов <source>, указывается путь к видео-файлу в атрибуте src. С помощью атрибута controls можно вывести элементы управления для проигрывателя.
С помощью специальных тегов <source> возможно добавлять несколько форматов видео. Это необходимо по причине того, что каждый браузер умеет воспроизводить только определённые форматы видео. Единственный формат, который корректно обрабатывают все браузеры — mp4.
Наличие трёх форматов файлов гарантирует работоспособность видео на любых устройствах. Также обязательным является наличие атрибута type, который сообщит браузеру формат видео. Именно по этому атрибуту браузер примет решение, какой файл необходимо загрузить.

Тег <video> имеет несколько важных атрибутов:

controls — Добавляет элементы управления для видеоплеера
autoplay — Автоматическое воспроизведение после загрузки видео
width — Ширина видеоплеера
height — Высота видеоплеера
Атрибуты width и height принимают значения в пикселях, при этом указывать единицу измерения не нужно.

-------------------------------------------------------------------------------------------------------------------------
                             
                           HTML: Базовая структура


Любой HTML-документ можно разбить на несколько основных составляющих:

Блок head, содержащий метаинформацию о нашем сайте. Данные из этого блока не отображаются непосредственно на странице, а служат для её описания, подключения стилей и скриптов.
Блок body является основным местом, где строится HTML-разметка. Данные в этом блоке будут обработаны и выведены в браузер.
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Базовая разметка HTML</title>
</head>
<body>
  <h1>Code Basics</h1>
  <p>Бесплатные уроки по программированию и HTML для новичков</p>
</body>
</html>
DOCTYPE (document type) — служебная информация для браузера, где описывается стандарт HTML, который нужно обработать.
 парный тег <html> с атрибутом lang="ru". Указание языка также необходимо для браузеров, особенно если сайт рассчитан на массовую аудиторию, в том числе и за рубежом.

------------------------------------------------------------------------------------------------------------------- 
                                HTML: Метатеги    

За заголовок во вкладке браузера отвечает парный тег <title>, внутри которого содержится название страницы.
Большинство метатегов записываются с использованием непарного тега <meta>. 
Описание часто используется при добавлении ссылки на страницу в социальных сетях. Эта информация используется поисковыми системами при выводе страницы в результатах поиска.

Чтобы установить описание, используется тег <meta> с двумя атрибутами:

name="description". Атрибут name указывает на то, какой тип метаинформации описывается в теге
content. Атрибут content указывает саму информацию
В разработке для страниц часто указывают ключевые слова. Они помогают роботам корректнее собирать информацию о странице, что хорошо сказывается на продвижении сайта в интернете. Как и с описанием, для установки ключевых слов используется два атрибута. В качестве значения атрибута name используется keywords. Сами ключевые слова перечисляются через запятую

<meta name="keywords" content="программирование, курсы, HTML, CSS">
В текущее время есть универсальные кодировки, которые поддерживают символы самых разных языков, но считается хорошим тоном, в качестве метатега, указывать кодировку страницы.

Для этого указывается только один атрибут — charset, значением которого выступает название кодировки. В 99% случаев это UTF-8. 

<meta charset="UTF-8">
<title>Code Basics</title>
<meta name="description" content="Programming fundamentals">
<meta charset="UTF-8">
------------------------------------------------------------------------------------------------------------------------------
                              HTML: link      

установить такую иконку на страницу, используется тег <link>, у которого указываются два атрибута:

rel для указания контента
href для указания ссылки на иконку
<link rel="icon" href="/favicon.png">
У тега <link> возможно указать тип изображения и его размер. Делается это с помощью атрибутов type и sizes.
После неё можно указать ещё несколько иконок с разными размерами:

<link rel="icon" href="/favicon64.png" type="image/png" sizes="64x64">
<link rel="icon" href="/favicon32.png" type="image/png" sizes="32x32">
<link rel="icon" href="/favicon16.png" type="image/png" sizes="16x16">
Теперь браузеры на разных устройствах смогут точнее работать с иконками и сразу загружать ту, которая им подходит.

Тег <link> позволяет добавлять не только фавиконку, но и подключать файлы стилей, шрифты, подсказывать браузерам следующую (или предыдущую) страницу статьи. Самый распространённый пример — подключение файла CSS к HTML-странице:

<link rel="stylesheet" href="style.css">
-------------------------------------------------------------------------------------------------------------------------------
                                         HTML: Viewport


Наиболее часто используют значение device-width у параметра width, которое устанавливает ширину страницы, равную ширине экрана устройства.

<head>
  <meta name="viewport" content="width=device-width">
</head>

Стоит обратить внимание, что параметры задаются внутри атрибута content, свойства в котором разделяются запятой.

Основные параметры метатега viewport
width — ширина сайта. Указывается в пикселях. Возможно использование значения device-width для установки ширины страницы равной ширине устройства.
height — высота сайта. Указывается в пикселях. Возможно использование значения device-height для установки высоты страницы равной высоте устройства.
initial-scale — начальный коэффициент масштабирования. Может принимать значение от 0.1 до 10.0. Значение единица масштабирует страницу по умолчанию.
user-scalable — указывает, может ли пользователь масштабировать страницу, то есть приближать или отдалять её. Принимает значение yes и no

Укажем viewport со следующими характеристиками:

Ширина: 980px
Масштаб: 1
Запрет управления масштабированием. То есть запретить приближать или отдалять контент с помощью жестов или «горячих клавиш»
Для этого создаём метатег и, вначале указываем ширину. Это делается с помощью значения width:

<meta name="viewport" content="width=980">
Задать изначальный масштаб поможет значение initial-scale со значением 1.0. Оно означает, что страница выведется без какого-либо искажения, с теми размерами шрифтов и других элементов, которые были установлены разработчиками.

<meta name="viewport" content="width=980, initial-scale=1.0">
Последнее — запрет на масштабирование. Для этого добавим user-scalable со значением no

<meta name="viewport" content="width=980, initial-scale=1.0, user-scalable=no">


--------------------------------------------------------------------------------------------------------------------------
                                     HTML: Блочные и строчные элементы

Познакомившись со многими HTML-элементами можно заметить, что их поведение не всегда одинаковое — некоторые элементы (параграфы, списки, <pre>, <div>, заголовки, таблицы) всегда начинаются с новой строки. Они занимают всю ширину экрана. Такие элементы называются блочными. Они являются основой вёрстки HTML, так как напрямую воздействуют на то, как будут расположены элементы рядом с ними на странице.

Помимо блочных элементов существуют строчные элементы. К ним относятся ссылки (<a>), теги начертания текста (<b>, <strong>, <i>, <em>), картинки, <span>. Они не влияют на расположение соседних элементов и предназначены для придания смысловой нагрузки. В отличие от блочных элементов, строчные не занимают всю ширину экрана, а лишь то пространство, которое им необходимо

<p>Параграф является блочным элементом.</p>
<p>Он занимает всё пространство по ширине, поэтому каждый параграф начинается с новой строки.</p>

<span>Span является строчным элементом.</span>
<span>Он занимает ширину, равную ширине своего контента, поэтому переноса строки нет</span>


----------------------------------------------------------------------------------------------------------------------------------
                                                    Формы в HTML

Любая форма начинается с главного тега <form>, внутри которого и будут располагаться поля для заполнения и кнопка действия.

<form>
  // Внутри формы будут поля для ввода данных и кнопка с действием (отправкой данных)
</form>
Основным атрибутом у тега <form> является action — путь к файлу, где располагается обработчик данных. Именно туда уйдут данные после отправки формы.

<form action="/search">
  // Данные, после заполнения, будут отправлены на страницу /search
</form>
Если данный атрибут не указан, данные уйдут на ту же страницу, откуда была отправлена форма.

------------------------------------------------------------------------------------------------------------------------------

                                                    Поле для ввода текста

Основной элемент форм в HTML — поле для ввода. Оно реализуется с помощью тега <input> и позволяет задать различные поля для ввода данных: текст, пароли, чекбоксы, радио кнопки, кнопки отправки, загрузка файла, ввод даты и так далее.

Текст
Пароли
Чекбоксы
Радио кнопки
Самый простой способ использования <input> — создание текстового поля для ввода. Именно <input> присутствует во всех полях поиска. Чтобы создать простое текстовое поле для ввода данных, необходимо внутрь формы добавить непарный тег <input> и указать у него атрибут type со значением text
 Чтобы указать назначение поля, используется тег <label>. Это парный тег, который напоминает параграф, но относится именно к описанию поля формы.

<form>
  <label>Введите имя</label>
  <input type="text">
</form>
Для связи label используется один из двух вариантов:

Связь по атрибуту id. Для этого у тега <input> указывается атрибут id с произвольным именем, а у <label> добавляется атрибут for с таким же именем, как и значение id у элемента input
<form>
  <label for="name">Введите имя</label>
  <input type="text" id="name">
</form

Связь через вложенность. Вы обратили внимание, что <label> — это парный тег? Для связи можно вложить input внутрь label, тогда они автоматически свяжутся друг с другом
<form>
  <label>Введите имя
    <input type="text">
  </label>
</form>

Атрибут placeholder

Встречаются ситуации, когда для поля есть описание, но совершенно непонятно, в каком формате нужно заполнить данные. Например, вначале указать имя, а потом фамилию, или наоборот? Чтобы помочь пользователю используется атрибут placeholder у тега <input>. Значение этого атрибута будет выведено внутри текстового поля.

<form>
  <label for="name">Введите имя и фамилию</label>
  <input type="text" id="name" placeholder="Иван Иванов">
</form>
Другие текстовые поля
Замечали, что при вводе паролей, браузер автоматически проставляет звёздочки вместо показа символов? Этого можно добиться указав значение password для атрибута type:

<form>
  <label for="pin">Введите пинкод</label>
  <input type="password" id="pin" placeholder="1234">
</form>

В стандарте HTML5 появилось ещё несколько интересных типов для тега <input>, которые реализуют обычное текстовое поле, но имеют свою реализацию. Например:

email
number
search
tel
url

---------------------------------------------------------------------------------------------------------------------------
                                                       HTML: Чекбокс

Для создания чекбокса используются два тега:

<input> с указанием type="checkbox"
<label>, в котором будет текст, связанный с нужным нам чекбоксом
Для создания связи <label> с <input> существует два способа:

Связь по id. Для этого необходимо задать уникальный id для <input> и связать <label> с чекбоксом с помощью атрибута for
<form>
  <input id="html" type="checkbox">
  <label for="html">Хочу изучать HTML</label>
</form>
Вложить <input> внутрь тега <label>. При этом указание уникального id не требуется
<form>
  <label>
    <input type="checkbox">
    Хочу изучать HTML
  </label>
</form>
Для того, чтобы после отправки формы на сервер возможно было узнать, какие именно пункты были выбраны, используется атрибут value, внутри которого находится значение, позволяющее определить чекбокс.

Так как чекбоксов на странице может быть много, и они могут относиться к разным формам, для определения конкретной группы чекбоксов используется атрибут name. Для каждой группы чекбоксов указывается своё имя, по которому, в дальнейшем, возможно отделить группы чекбоксов при обработке на сервере.

<form>
  <label>
    <input type="checkbox" name="languages" value="HTML">
    Хочу изучать HTML
  </label>
  <br>
  <label>
    <input type="checkbox" name="languages" value="CSS">
    Хочу изучать CSS
  </label>
  <br>
  <label>
    <input type="checkbox" name="languages" value="JS">
    Хочу изучать JS
  </label>
</form>

--------------------------------------------------------------------------------------------------------
                                                  HTML: Радиокнопка

Для создания радиокнопки, так же, как и чекбокса, используются два тега:

<input> с указанием type="radio". Обязательным атрибутом является name, значением которого является имя. Данное имя должно быть одинаковым у всей группы радиокнопок. Без этого атрибута будет возможно выбрать все значения сразу, так как браузер не будет видеть связи между ними
<label>, в котором будет текст, связанный с нужной нам радиокнопкой
Связь <input> с <label> происходит уже по одному из двух знакомых нам сценариев:

Связь по id. Для этого необходимо задать уникальный id для <input>, и связать <label> с радиокнопкой с помощью атрибута for
  <form>
    <input id="yes" type="radio" name="question">
    <label for="yes">Да</label>

    <input id="no" type="radio" name="question">
    <label for="no">Нет</label>
  </form>
Вложить <input> внутрь тега <label>. При этом указание уникального id не требуется
  <form>
    <label>
      <input type="radio" name="question">
      Да
    </label>
    <br>
    <label>
      <input type="radio" name="question">
      Нет
    </label>
  </form>
Для того чтобы после отправки формы на сервер возможно было узнать, какой именно пункт был выбран, используется атрибут value, внутри которого находится значение, позволяющее определить радиокнопку.

<form>
  <label>
    <input type="radio" name="question" value="yes">
    Да
  </label>
  <br>
  <label>
    <input type="radio" name="question" value="no">
    Нет
  </label>
</form>


-----------------------------------------------------------------------------------------------------------------------------

                                                    HTML: Textarea

 элемент <textarea>, позволяющий вводить несколько строчек текста.
Заметьте, что <textarea> является парным тегом. Это означает, что вы можете вложить в него текст по умолчанию, чтобы пользователь быстрее понял, что ему необходимо ввести.

По умолчанию высота и ширина <textarea> зависит от настроек браузера. Это значит, что в разных браузерах высота и ширина может меняться. Для того, чтобы установить одинаковое значение, используются атрибуты rows и cols, означающие количество строк и столбцов соответственно.

<form>
  <textarea rows="5" cols="30">textarea с 5 строками и 30 столбцами</textarea>
</form>


---------------------------------------------------------------------------

                                                        HTML: Список

Для создания такого выпадающего списка используется тег <select> с вложенными внутри него тегами <option>. Всё это похоже на создание обычных списков, где вместо ul/ol используется <select>, а вместо <li> используется <option>.

Часто первый пункт списка используется для заголовка всего выпадающего списка. В таком случае для него используют атрибут disabled, чтобы заблокировать его для выбора.

<form>
  <select>
    <option disabled>Какой курс вы хотите пройти?</option>
    <option>JS</option>
    <option>PHP</option>
    <option>Java</option>
    <option>Racket</option>
    <option>HTML</option>
    <option>CSS</option>
  </select>
</form>
Список внутри формы также может быть представлен в виде списка, в котором можно выбрать несколько элементов. Делается это с помощью зажатия кнопки ctrl и клика мышки по полям, которые мы хотим выбрать.

Для того, чтобы создать список с множественным выбором, у тега <select> добавляется атрибут multiple

<form>
  <select multiple>
    <option>JS</option>
    <option>PHP</option>
    <option>Java</option>
    <option>Racket</option>
    <option>HTML</option>
    <option>CSS</option>
  </select>
</form>

------------------------------------------------------------------------------------------------------------------------------

                                                HTML: Отправка формы

Для этого, используя парный тег <button>

<form>
  <button>Отправить</button>
</form>
После нажатия на кнопку «Отправить», данные будут переданы обработчику, который указан в атрибуте action (если не указан, то данные отправятся на эту же страницу). После отправки данных страница будет перезагружена.


Задание
Создайте форму, у которой файл с обработчиком данных лежит по адресу /people. Внутри формы расположите следующие элементы:

2 текстовых поля <input>
Список с возможностью множественного выбора
Кнопку «Отправить»
<form action="/people">
    <label>
        Name
        <input type="text">
    </label>
    <label>
        Email
        <input type="text">
    </label>
    <select multiple>
        <option disabled>Which course you want to take?</option>
        <option>JS</option>
        <option>PHP</option>
        <option>Java</option>
    </select>

    <button>Apply</button>
</form>

------------------------------------------------------------------------------------------------------
                                               HTML: Семантические элементы

Основными семантическими тегами стали:

<article>
<aside>
<footer>
<header>
<main>
<nav>
<section>

-------------------------------------------------------
                                                  HTML: Шапка
Шапкой на сайте принято называть верхнюю область, в которой находятся контактные данные, меню, логотип. До появления стандарта HTML5 данную область просто размечали, используя обычный блок <div>, что не вносило «смысла».

В HTML5 для разметки шапки сайта используется парный тег <header>, внутри которого располагаются элементы.

Тег <header> по своему поведению не отличается от тега <div> и не содержит отличных стандартных стилей, поэтому его можно использовать на любом сайте, не боясь нарушить внешний вид сайта.

--------------------------------------------------------------------------------------------------------------------------
                                                      HTML: Меню

Для создания полноценного меню используется парный тег <nav>, задача которого — разметить область страницы с основным меню. Также различные устройства для чтения с экрана, которыми пользуются люди со слабым зрением, используют этот тег, чтобы определить, стоит ли его отображать на странице.

странице, но есть несколько рекомендаций:

Нет необходимости оборачивать каждое меню в элемент nav. В основном такой областью указываются только основные меню. Дополнительные, такие как меню в футере, не оборачивают в тег <nav>, хотя это не запрещено
Хорошим примером дополнительного использования nav — навигация по текущей странице
nav может содержать не только ссылки, но так же и текст, в котором есть ссылки. Ориентируйтесь на здравый смысл. Если навигация является основной для страницы или всего сайта, то оберните её в тег <nav>
<header>
  <img src="/logo.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header> 

----------------------------------------------------------------------------------------------------------------------------
                                              HTML: Уникальный контент страницы

Каждая HTML-страница содержит уникальный контент, который есть только на этой странице. Такая область размечается с помощью парного тега <main>. Это поможет устройствам для людей с ограниченными возможностями и поисковым роботам быстрее понять, где находится основной контент на страниц
Элемент main является уникальным для одной страницы. Это отражает его семантическое назначение — разметка уникального контента. При оборачивании контента в main важно не включать в него неуникальные области:

Боковое меню
Общую навигацию для сайта
Общую шапку и футер сайта
Логотип
Размещайте в main именно текстовый/графический контент. Найти такой контент в шаблонах легко — он не дублируется на других страницах.

Внутри элемента main могут находиться свои области навигации, шапки, секции и другие элементы,

---------------------------------------------------------------------------------------------------------------------------------

                                                HTML: Секция

На больших страницах содержится много контента, который помещён друг в друга. Внутри шапки может быть отдельная область с правилами использования, внутри main секции с формой, дополнительной информацией и так далее. Они могут быть выделены с помощью тега <section>, значение которого — разметка связанных, по смыслу, блоков внутри секции.

Может звучать немного запутано, но представьте себе страницу музыкального портала, у которого есть области:

Информация об исполнителе
Популярные треки исполнителя
Дискография
Список ближайших концертов
Если это страница об исполнителе, то весь этот контент будет расположен внутри секции main, при этом стоит выделить и эти 4 секции. Они связаны с общим контентом, но являются самостоятельными единицами внутри него. Такая вёрстка может выглядеть следующим образом:

<main>
  <h1>Blue October</h1>
  <p>Американская группа из Хьюстона, играющая в стиле альтернативный рок</p>
  <section>
    <h2>Популярные треки</h2>
  </section>
  <section>
    <h2>Дискография</h2>
  </section>
  <section>
    <h2>Ближайшие концерты</h2>
  </section>
</main>
Если «вытащить эти секции» из тега <main>, то они потеряют свой смысл, так как без текста об исполнителе такая информация может быть непонятна. Такая информация напрямую связана с основным содержанием и не может существовать без него.

Добавим в учебный пример форму заказа услуги. Эта форма для заказа именно той услуги, которая представлена на странице, поэтому секция находится внутри области main и вынесена в отдельный тег <section>.

<header>
  <img src="/logo.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header>

<main>
  <p>Основной контент страницы. Это может быть статья, описание услуги, данные на странице контакты</p>

  <section class="callback-form">
    <h2>Оставить заявку</h2>
    <form>
      <!-- Здесь форма заказа услуги -->
    </form>
  </section>
</main>
В большинстве случаев все области section имеют свой заголовок. Это хороший способ понять, когда нужно добавить область section.


--------------------------------------------------------------------------------------------------------

                                           HTML: Самостоятельная секция

Помимо тега <section>, для обозначения секции используется тег <article>. Он предназначается для разметки секции, которая может быть использована самостоятельно и не привязана структурно к конкретной странице. Например, блок с курсом валют, погода, превью новости или статьи. Данные блоки хоть и могут напрямую касаться текущей страницы, но они представляют собой самостоятельную единицу, которая не потеряет смысл, если взглянуть на неё отдельно от контекста.

В связи с тем, что <article> может быть использован самостоятельно, он обязательно внутри себя содержит заголовок.

<header>
  <img src="/logo.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header>

<main>
  <p>Основной контент страницы. Это может быть статья, описание услуги, данные на странице контакты</p>

  <section class="callback-form">
    <h2>Оставить заявку</h2>
    <form>
      <!-- Здесь форма заказа услуги -->
    </form>
  </section>

  <section class="more">
    <h2>Читайте также</h2>
    <article class="article-block">
      <h3>Услуга 2</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>

    <article class="article-block">
      <h3>Услуга 3</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>

    <article class="article-block">
      <h3>Услуга 4</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>
  </section>
</main>
Обратите внимание, что сами <article> обёрнуты в <section>, так как эта секция напрямую связана с текущей страницей и показывает похожие услуги. А услуги размечены с помощью <article>. Они могут быть «выдернуты» из контекста, и всё равно будет понятно, что это описание конкретной услуги, которую мы предлагаем.

------------------------------------------------------------------------------------------------------------------------------
                                             HTML: Боковая панель

ольшинство сайтов имеют боковую панель или, как её ещё называют, сайдбар. Он служит для отображения информации, которая дополняет основной текст, но не является обязательной. Чаще всего это меню раздела, список определений из статьи, виджеты и т.д.

Для того чтобы корректно разметить такую область, существует тег <aside>, внутри которого и располагается наша боковая панель. Добавим в пример из прошлого урока боковую панель с дополнительным меню.
<header>
  <img src="/logo.png" alt="Логотип"> <!-- Логотип сайта -->
  <nav> <!-- Меню -->
    <ul>
      <li><a href="/">Главная</a></li>
      <li><a href="/about">О нас</a></li>
      <li><a href="/contacts">Контакты</a></li>
    </ul>
  </nav>
</header>

<aside> <!-- Боковая панель (сайдбар) -->
  <nav> <!-- Дополнительное меню страницы -->
    <ul>
      <li><a href="/service-1/">Услуга 1</a></li>
      <li><a href="/service-2/">Услуга 2</a></li>
      <li><a href="/service-3/">Услуга 3</a></li>
    </ul>
  </nav>
</aside>

<main>
  <p>Основной контент страницы. Это может быть статья, описание услуги, данные на странице контакты</p>

  <section class="callback-form">
    <h2>Оставить заявку</h2>
    <form>
      <!-- Здесь форма заказа услуги -->
    </form>
  </section>

  <section class="more">
    <h2>Читайте также</h2>
    <article class="article-block">
      <h3>Услуга 2</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>

    <article class="article-block">
      <h3>Услуга 3</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>

    <article class="article-block">
      <h3>Услуга 4</h3>
      <p>Описание новой услуги</p>
      <a href="#">Ссылка на услугу</a>
    </article>
  </section>
</main>
Обратите внимание, что <aside> содержится вне тега <main>. Этот контент не обязан быть уникальным на каждой странице. Он может быть уникальным для каждого конкретного раздела (если речь идёт, например, о меню). Если боковая панель уникальна для каждой страницы, то она должна быть расположена внутри тега <main>.


-------------------------------------------------------------------------------------------------------------------------

                                         HTML: Семантический WEB

Существуют две реализации семантического веба:

На основе микроразметки. Это специальные атрибуты, которые добавляются в HTML-разметку и помогают роботам найти нужную информацию. Микроразметка используется чаще всего, так как имеет множество возможностей и полей для разметки

Используя стандарт HTML5. В стандарте появилось множество тегов, которые помогают роботам анализировать информацию, находить логические связи между блоками (или понимать, что их нет), искать необходимые части для корректного отображения на устройствах для чтения

Хотя стандарт HTML5 и не вытеснил микроразметку, ввиду меньших возможностей, его использование вместе с микроразметкой позволяет роботам корректнее обрабатывать сайт и находить в нём логические блоки.
Пример семантической разметки на HTML5
<main> <!-- Определение основной части страницы -->
  <article> <!-- Определение статьи -->
    <header> <!-- Заголовочная информация статьи -->
      <h1>Название статьи</h1>
      <img src="article.png" alt="Заголовок статьи">
    </header>

    <p>Текст нашей статьи</p>

    <footer> <!-- «Подвал статьи» с указанием автора и даты -->
      <address> <!-- Информация об авторе статьи -->
        <p>Автор: Дмитрий</p>
        <p>Email: dmitry@test.test</p>
      </address>
      <time datetime="2019-07-27">27 июля</time> <!-- Дата написания статьи -->
    </footer>
  </article>
</main>
Сейчас появились возможности показать роботам смысл (семантику) HTML-страницы. Благодаря этому при запросе в поисковую систему можно увидеть не только список ссылок на сайты, но и конкретную информацию, например рецепт пирога, маршрут до нужной улицы, контакты организации.

Правильная семантика также позволяет устройствам правильно воспринимать части веб-сайта. Например, режим чтения в телефонах старается отбросить не связанные с контентом блоки, чтобы оставить только смысловую часть.

---------------------------------------------------------------------------------------------------------------
                                                HTML: Микроразметка

Микроразметка — инструмент, который реализуется с помощью дополнительных атрибутов HTML-тегов.

Schema.org
Разработчики создали несколько вариантов микроразметки, наиболее распространённым из которых является Schema.org с широким выбором «словарей» для описания информации на странице.

Словарь — это набор правил, по которым описываются блоки на странице. Сеансы фильмов в кинотеатре, информация отдела продаж, цены на товары, отзывы о статье — всё это представлено в небольших словарях.

Действия для создания микроразметки:

Выбор словаря. Узнать о поддержке тех или иных словарей поисковой системой можно с помощью документации. Для поисковой системы Яндекс доступные словари указаны здесь
Определение блока, который будет размечаться. Это может быть не только блок, а вся страница сайта
Выделение информации. На примере разметки контактной информации это: название организации, телефон, email, адрес
Указание атрибутов в зависимости от типа информации и словаря
Для того чтобы подсказать поисковой системе, что данные размечены словарём, указывается два атрибута:

itemscope — указатель на то, что блок — единая сущность, и данные в нем связаны. Указывается только у главного блока и не имеет своего значения
itemtype — указывает на то, какой словарь будет использоваться. Например, для описания контактов выбран словарь Organization. Полный вид атрибута: itemtype="http://schema.org/Organization"
<section itemscope itemtype="http://schema.org/Organization">
  <h1>Компания «Прауд»</h1>
  <p>Адрес: г.Мотино, улица Строителей, дом 6</p>
  <p>Телефон: 8 (8765) 333-00-00</p>
  <p>Email: info@proud-company.test</p>
</section>
Теперь поисковая система будет знать, что внутри этого блока информация об организации. Приступим к разметке адреса. Schema.org позволяет отдельно указывать улицу, дом, строение и так далее, но мы обобщим это и используем только одно значение itemprop="address", чтобы обозначить адрес предприятия. Обратите внимание, что элементы разметки указываются с помощью атрибута itemprop.

<section itemscope itemtype="http://schema.org/Organization">
  <h1>Компания «Прауд»</h1>
  <p>Адрес: <span itemprop="address">г.Мотино, улица Строителей, дом 6</span></p>
  <p>Телефон: 8 (8765) 333-00-00</p>
  <p>Email: info@proud-company.test</p>
</section>
По аналогии с адресом разметим остальные данные: название, телефон, email. Для каждого из них есть своё значение атрибута itemprop. Обратите внимание, что размечаются только данные, оставляя за «бортом» название поля. Для этого нужные данные оборачивают в <span> и для него указывают атрибут.

<section itemscope itemtype="http://schema.org/Organization">
  <h1 itemprop="name">Компания «Прауд»</h1>
  <p>Адрес: <span itemprop="address">г.Мотино, улица Строителей, дом 6</span></p>
  <p>Телефон: <span itemprop="telephone">8 (8765) 333-00-00</span></p>
  <p>Email: <span itemprop="email">info@proud-company.test</span></p>
</section>
Для проверки корректности микроразметки можно пользоваться инструментами популярных поисковых систем:

Google
Yandex
Задание
Создайте разметку организации, в которой укажите:

Название организации
Email организации
Теги используются на своё усмотрение. Вся семантика строится на уровне микроразметки. В качестве словаря используйте http://schema.org/Organization

<section itemscope itemtype="http://schema.org/Organization">
    <header>
        <h1 itemprop="name">Organization Name</h1>
    </header>

    <p>Email: <span itemprop="email">test@test.ru</span></p>
</section>

---------------------------------------------------------------------------------------------------------------------------------

                                         Ошибки в HTML-разметке

Для решения таких проблем созданы специальные валидаторы HTML-разметки, которые автоматически проверяют код на ошибки. Можно указать ему ссылку на страницу или готовый фрагмент HTML-разметки, после чего валидатор выдаст список предупреждений и ошибок. На примере выше валидатор покажет следующие ошибки:
Распространённым валидатором является онлайн сервис от W3C, его можно найти по ссылке https://validator.w3.org/. Он поддерживает все стандарты HTML, поэтому важно не забывать проверять разметку с его помощью.
